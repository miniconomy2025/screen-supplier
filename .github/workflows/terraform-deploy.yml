name: Terraform Deploy Infrastructure
on:
  workflow_dispatch: 
    
jobs:
  terraform-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: af-south-1

      - name: Terraform Init (Main)
        working-directory: terraform/main
        run: terraform init

      - name: Terraform Apply (Main)
        working-directory: terraform/main
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve

      - name: Install Flyway
        run: |
          wget -qO- https://download.red-gate.com/maven/release/org/flywaydb/flyway-commandline/9.22.3/flyway-commandline-9.22.3-linux-x64.tar.gz | tar xvz
          sudo mv flyway-9.22.3 /opt/flyway
          sudo ln -s /opt/flyway/flyway /usr/local/bin

      - name: Wait for RDS to be ready
        run: |
          echo "Waiting for RDS instance to be fully ready..."
          sleep 60

      - name: Run Database Migrations
        run: |
          # Get database connection details from Secrets Manager
          DB_SECRET=$(aws secretsmanager get-secret-value --region af-south-1 --secret-id prod/postgres-screen-supplier --query SecretString --output text)
          DB_HOST=$(aws secretsmanager get-secret-value --region af-south-1 --secret-id screen-supplier-rds-host --query SecretString --output text)
          
          DB_USERNAME=$(echo $DB_SECRET | jq -r '.db_username')
          DB_PASSWORD=$(echo $DB_SECRET | jq -r '.db_password')
          DB_URL="jdbc:postgresql://$DB_HOST:5432/ScreenProducerDb"
          
          echo "Running database migrations..."
          flyway \
            -url="$DB_URL" \
            -user="$DB_USERNAME" \
            -password="$DB_PASSWORD" \
            -locations="filesystem:./migration" \
            -baselineOnMigrate=true \
            -validateOnMigrate=true \
            -table=flyway_schema_history \
            migrate
          
          echo "Database migrations completed successfully!"

      - name: Output and Set EC2 IP
        working-directory: terraform/main
        run: |
          EC2_IP=$(terraform output -raw ec2_public_ip)
          echo "EC2_PUBLIC_IP=$EC2_IP" >> $GITHUB_ENV
          
          # Set repository variable using GitHub CLI (simpler)
          gh variable set EC2_PUBLIC_IP --body "$EC2_IP"
          
          echo "EC2_PUBLIC_IP automatically set to: $EC2_IP"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
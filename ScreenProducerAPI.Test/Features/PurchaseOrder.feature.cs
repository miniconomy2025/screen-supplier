// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace ScreenProducerAPI.Test.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::NUnit.Framework.TestFixtureAttribute()]
    [global::NUnit.Framework.DescriptionAttribute("Purchase Order Service")]
    [global::NUnit.Framework.FixtureLifeCycleAttribute(global::NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class PurchaseOrderServiceFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Purchase Order Service", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
#line 1 "PurchaseOrder.feature"
#line hidden
        
        [global::NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [global::NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        [global::NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [global::NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::NUnit.Framework.TestContext>(global::NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/PurchaseOrder.feature.ndjson", 24);
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Create purchase order successfully for material")]
        [global::NUnit.Framework.CategoryAttribute("PurchaseOrder")]
        public async global::System.Threading.Tasks.Task CreatePurchaseOrderSuccessfullyForMaterial()
        {
            string[] tagsOfScenario = new string[] {
                    "PurchaseOrder"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create purchase order successfully for material", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 4
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
 await testRunner.GivenAsync("the database has order status \"requires_payment_supplier\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 6
 await testRunner.AndAsync("the simulation time is \"2025-01-15 10:30:00\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 7
 await testRunner.WhenAsync("I create a purchase order with order ID 123, quantity 100, unit price 50, bank ac" +
                        "count \"test-account\", origin \"test-supplier\", material ID 1, and equipment order" +
                        " false", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 8
 await testRunner.ThenAsync("the purchase order should be created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 9
 await testRunner.AndAsync("the order should have order ID 123", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
 await testRunner.AndAsync("the order should have quantity 100", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
 await testRunner.AndAsync("the order should have unit price 50", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
 await testRunner.AndAsync("the order should have bank account \"test-account\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
 await testRunner.AndAsync("the order should have origin \"test-supplier\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
 await testRunner.AndAsync("the order should have material ID 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
 await testRunner.AndAsync("the order should not be an equipment order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Fail to create purchase order when required status missing")]
        [global::NUnit.Framework.CategoryAttribute("PurchaseOrder")]
        public async global::System.Threading.Tasks.Task FailToCreatePurchaseOrderWhenRequiredStatusMissing()
        {
            string[] tagsOfScenario = new string[] {
                    "PurchaseOrder"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "1";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Fail to create purchase order when required status missing", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 18
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 19
 await testRunner.GivenAsync("the database does not have order status \"requires_payment_supplier\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 20
 await testRunner.WhenAsync("I create a purchase order with order ID 789, quantity 50, unit price 25, bank acc" +
                        "ount \"test-account\", origin \"test-supplier\", material ID 2, and equipment order " +
                        "false", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 21
 await testRunner.ThenAsync("the purchase order should not be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 22
 await testRunner.AndAsync("the result should be null", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Find purchase order by shipment ID successfully")]
        [global::NUnit.Framework.CategoryAttribute("PurchaseOrder")]
        public async global::System.Threading.Tasks.Task FindPurchaseOrderByShipmentIDSuccessfully()
        {
            string[] tagsOfScenario = new string[] {
                    "PurchaseOrder"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "2";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Find purchase order by shipment ID successfully", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 25
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 26
 await testRunner.GivenAsync("there is a purchase order with shipment ID 100", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 27
 await testRunner.WhenAsync("I find purchase order by shipment ID 100", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 28
 await testRunner.ThenAsync("the purchase order should be found", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 29
 await testRunner.AndAsync("the order should have shipment ID 100", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Find purchase order by shipment ID returns null when not found")]
        [global::NUnit.Framework.CategoryAttribute("PurchaseOrder")]
        public async global::System.Threading.Tasks.Task FindPurchaseOrderByShipmentIDReturnsNullWhenNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "PurchaseOrder"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "3";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Find purchase order by shipment ID returns null when not found", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 32
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 33
 await testRunner.GivenAsync("there is no purchase order with shipment ID 999", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 34
 await testRunner.WhenAsync("I find purchase order by shipment ID 999", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 35
 await testRunner.ThenAsync("no purchase order should be found", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Update shipment ID successfully")]
        [global::NUnit.Framework.CategoryAttribute("PurchaseOrder")]
        [global::NUnit.Framework.TestCaseAttribute("1", "201", "4", null)]
        [global::NUnit.Framework.TestCaseAttribute("2", "202", "5", null)]
        [global::NUnit.Framework.TestCaseAttribute("3", "203", "6", null)]
        public async global::System.Threading.Tasks.Task UpdateShipmentIDSuccessfully(string orderID, string shipmentID, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PurchaseOrder"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("orderID", orderID);
            argumentsOfScenario.Add("shipmentID", shipmentID);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update shipment ID successfully", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 38
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 39
 await testRunner.GivenAsync(string.Format("there is a purchase order with ID {0}", orderID), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 40
 await testRunner.WhenAsync(string.Format("I update shipment ID to {0} for purchase order {1}", shipmentID, orderID), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 41
 await testRunner.ThenAsync("the shipment ID update should succeed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 42
 await testRunner.AndAsync(string.Format("the order should have shipment ID {0}", shipmentID), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Update shipment ID fails when order not found")]
        [global::NUnit.Framework.CategoryAttribute("PurchaseOrder")]
        public async global::System.Threading.Tasks.Task UpdateShipmentIDFailsWhenOrderNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "PurchaseOrder"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "7";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update shipment ID fails when order not found", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 51
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 52
 await testRunner.GivenAsync("there is no purchase order with ID 999", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 53
 await testRunner.WhenAsync("I update shipment ID to 500 for purchase order 999", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 54
 await testRunner.ThenAsync("the shipment ID update should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Update delivery quantity and mark as delivered when fully delivered")]
        [global::NUnit.Framework.CategoryAttribute("PurchaseOrder")]
        [global::NUnit.Framework.TestCaseAttribute("1", "100", "50", "50", "requires_payment_supplier", "8", null)]
        [global::NUnit.Framework.TestCaseAttribute("2", "100", "100", "100", "delivered", "9", null)]
        [global::NUnit.Framework.TestCaseAttribute("3", "100", "150", "150", "delivered", "10", null)]
        public async global::System.Threading.Tasks.Task UpdateDeliveryQuantityAndMarkAsDeliveredWhenFullyDelivered(string orderID, string totalQuantity, string deliveryQuantity, string expectedDelivered, string expectedStatus, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PurchaseOrder"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("orderID", orderID);
            argumentsOfScenario.Add("totalQuantity", totalQuantity);
            argumentsOfScenario.Add("deliveryQuantity", deliveryQuantity);
            argumentsOfScenario.Add("expectedDelivered", expectedDelivered);
            argumentsOfScenario.Add("expectedStatus", expectedStatus);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update delivery quantity and mark as delivered when fully delivered", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 57
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 58
 await testRunner.GivenAsync(string.Format("there is a purchase order with ID {0} and quantity {1}", orderID, totalQuantity), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 59
 await testRunner.AndAsync("the database has order status \"delivered\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 60
 await testRunner.WhenAsync(string.Format("I update delivery quantity by {0} for purchase order {1}", deliveryQuantity, orderID), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 61
 await testRunner.ThenAsync("the delivery quantity update should succeed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 62
 await testRunner.AndAsync(string.Format("the order should have delivered quantity {0}", expectedDelivered), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 63
 await testRunner.AndAsync(string.Format("the order should have status {0}", expectedStatus), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Update delivery quantity fails when order not found")]
        [global::NUnit.Framework.CategoryAttribute("PurchaseOrder")]
        public async global::System.Threading.Tasks.Task UpdateDeliveryQuantityFailsWhenOrderNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "PurchaseOrder"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "11";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update delivery quantity fails when order not found", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 72
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 73
 await testRunner.GivenAsync("there is no purchase order with ID 999", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 74
 await testRunner.WhenAsync("I update delivery quantity by 50 for purchase order 999", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 75
 await testRunner.ThenAsync("the delivery quantity update should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Update order status fails when order not found")]
        [global::NUnit.Framework.CategoryAttribute("PurchaseOrder")]
        public async global::System.Threading.Tasks.Task UpdateOrderStatusFailsWhenOrderNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "PurchaseOrder"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "12";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update order status fails when order not found", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 78
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 79
 await testRunner.GivenAsync("there is no purchase order with ID 999", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 80
 await testRunner.AndAsync("the database has order status \"delivered\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 81
 await testRunner.WhenAsync("I update status to \"delivered\" for purchase order 999", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 82
 await testRunner.ThenAsync("the status update should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Update order status fails when status not found")]
        [global::NUnit.Framework.CategoryAttribute("PurchaseOrder")]
        public async global::System.Threading.Tasks.Task UpdateOrderStatusFailsWhenStatusNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "PurchaseOrder"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "13";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update order status fails when status not found", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 85
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 86
 await testRunner.GivenAsync("there is a purchase order with ID 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 87
 await testRunner.AndAsync("the database does not have order status \"invalid_status\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 88
 await testRunner.WhenAsync("I update status to \"invalid_status\" for purchase order 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 89
 await testRunner.ThenAsync("the status update should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Update order shipping details successfully")]
        [global::NUnit.Framework.CategoryAttribute("PurchaseOrder")]
        [global::NUnit.Framework.TestCaseAttribute("1", "shipper-123", "25", "14", null)]
        [global::NUnit.Framework.TestCaseAttribute("2", "logistics-456", "50", "15", null)]
        public async global::System.Threading.Tasks.Task UpdateOrderShippingDetailsSuccessfully(string orderID, string bankAccount, string shippingPrice, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PurchaseOrder"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("orderID", orderID);
            argumentsOfScenario.Add("bankAccount", bankAccount);
            argumentsOfScenario.Add("shippingPrice", shippingPrice);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update order shipping details successfully", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 92
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 93
 await testRunner.GivenAsync(string.Format("there is a purchase order with ID {0}", orderID), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 94
 await testRunner.WhenAsync(string.Format("I update shipping details with bank account \"{0}\" and shipping price {1} for purc" +
                            "hase order {2}", bankAccount, shippingPrice, orderID), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 95
 await testRunner.ThenAsync("the shipping details update should succeed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 96
 await testRunner.AndAsync(string.Format("the order should have shipper bank account \"{0}\"", bankAccount), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 97
 await testRunner.AndAsync(string.Format("the order should have shipping price {0}", shippingPrice), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Update order shipping details fails when order not found")]
        [global::NUnit.Framework.CategoryAttribute("PurchaseOrder")]
        public async global::System.Threading.Tasks.Task UpdateOrderShippingDetailsFailsWhenOrderNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "PurchaseOrder"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "16";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update order shipping details fails when order not found", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 105
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 106
 await testRunner.GivenAsync("there is no purchase order with ID 999", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 107
 await testRunner.WhenAsync("I update shipping details with bank account \"test-shipper\" and shipping price 30 " +
                        "for purchase order 999", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 108
 await testRunner.ThenAsync("the shipping details update should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Get purchase order by ID successfully")]
        [global::NUnit.Framework.CategoryAttribute("PurchaseOrder")]
        public async global::System.Threading.Tasks.Task GetPurchaseOrderByIDSuccessfully()
        {
            string[] tagsOfScenario = new string[] {
                    "PurchaseOrder"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "17";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get purchase order by ID successfully", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 111
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 112
 await testRunner.GivenAsync("there is a purchase order with ID 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 113
 await testRunner.WhenAsync("I get purchase order by ID 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 114
 await testRunner.ThenAsync("the purchase order should be retrieved successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Get purchase order by ID returns null when not found")]
        [global::NUnit.Framework.CategoryAttribute("PurchaseOrder")]
        public async global::System.Threading.Tasks.Task GetPurchaseOrderByIDReturnsNullWhenNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "PurchaseOrder"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "18";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get purchase order by ID returns null when not found", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 117
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 118
 await testRunner.GivenAsync("there is no purchase order with ID 999", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 119
 await testRunner.WhenAsync("I get purchase order by ID 999", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 120
 await testRunner.ThenAsync("no purchase order should be retrieved", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Get active purchase orders excludes delivered orders")]
        [global::NUnit.Framework.CategoryAttribute("PurchaseOrder")]
        public async global::System.Threading.Tasks.Task GetActivePurchaseOrdersExcludesDeliveredOrders()
        {
            string[] tagsOfScenario = new string[] {
                    "PurchaseOrder"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "19";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get active purchase orders excludes delivered orders", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 123
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 124
 await testRunner.GivenAsync("there are purchase orders with various statuses", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 125
 await testRunner.WhenAsync("I get active purchase orders", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 126
 await testRunner.ThenAsync("only non-delivered orders should be returned", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 127
 await testRunner.AndAsync("delivered orders should not be included", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Get all orders includes all orders regardless of status")]
        [global::NUnit.Framework.CategoryAttribute("PurchaseOrder")]
        public async global::System.Threading.Tasks.Task GetAllOrdersIncludesAllOrdersRegardlessOfStatus()
        {
            string[] tagsOfScenario = new string[] {
                    "PurchaseOrder"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "20";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get all orders includes all orders regardless of status", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 130
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 131
 await testRunner.GivenAsync("there are purchase orders with various statuses", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 132
 await testRunner.WhenAsync("I get all orders", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 133
 await testRunner.ThenAsync("all orders should be returned including delivered ones", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Get past orders returns limited results ordered by date")]
        [global::NUnit.Framework.CategoryAttribute("PurchaseOrder")]
        public async global::System.Threading.Tasks.Task GetPastOrdersReturnsLimitedResultsOrderedByDate()
        {
            string[] tagsOfScenario = new string[] {
                    "PurchaseOrder"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "21";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get past orders returns limited results ordered by date", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 136
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 137
 await testRunner.GivenAsync("there are multiple purchase orders with different dates", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 138
 await testRunner.WhenAsync("I get past orders for a specific date", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 139
 await testRunner.ThenAsync("orders should be returned in descending date order", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 140
 await testRunner.AndAsync("no more than 100 orders should be returned", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
